{
  "stats": {
    "suites": 1,
    "tests": 21,
    "passes": 20,
    "pending": 0,
    "failures": 1,
    "start": "2024-06-12T16:59:01.807Z",
    "end": "2024-06-12T16:59:06.279Z",
    "duration": 4472,
    "testsRegistered": 21,
    "passPercent": 95.23809523809523,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "92c033e5-344d-4df3-8ac0-97f9494ffe57",
      "title": "",
      "fullFile": "/Users/olha.parkhomenko/Downloads/diplom/src/tests/api.js",
      "file": "/src/tests/api.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2334b723-c1c6-464c-8830-33475e538549",
          "title": "Api positive",
          "fullFile": "/Users/olha.parkhomenko/Downloads/diplom/src/tests/api.js",
          "file": "/src/tests/api.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check negative cases with sum (less than min in paywaycurrencies)",
              "fullTitle": "Api positive Check negative cases with sum (less than min in paywaycurrencies)",
              "timedOut": false,
              "duration": 734,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "93accc3a-1ce4-490f-beec-c96d53ba7a15",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with sum (more than max in paywaycurrencies)",
              "fullTitle": "Api positive Check negative cases with sum (more than max in paywaycurrencies)",
              "timedOut": false,
              "duration": 193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "b685133e-5959-45c2-80d9-e134872700a4",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with sum (more than max_limit in payway)",
              "fullTitle": "Api positive Check negative cases with sum (more than max_limit in payway)",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "542a5c9f-44d6-4c6b-883e-1e9e4a6ab4b2",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with sum (\"\")",
              "fullTitle": "Api positive Check negative cases with sum (\"\")",
              "timedOut": false,
              "duration": 198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "37d227a7-5399-4702-8792-08257ba47a50",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with sum (\"56475647564\")",
              "fullTitle": "Api positive Check negative cases with sum (\"56475647564\")",
              "timedOut": false,
              "duration": 188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "44b2c0ea-0823-43ee-a812-4784d5e47aa1",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with sum (\"fbhvjfvjdf\")",
              "fullTitle": "Api positive Check negative cases with sum (\"fbhvjfvjdf\")",
              "timedOut": false,
              "duration": 194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "b001628a-a2e9-4940-817d-ac246d76799d",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with sum (\"TRUE\")",
              "fullTitle": "Api positive Check negative cases with sum (\"TRUE\")",
              "timedOut": false,
              "duration": 183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "c32e60fa-8fc1-449f-a6ad-777dee26a187",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with sum (\"-15,5\")",
              "fullTitle": "Api positive Check negative cases with sum (\"-15,5\")",
              "timedOut": false,
              "duration": 186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "b85f1d50-f871-4aff-a467-fc36522373a5",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with paywaycurrency (\"\")",
              "fullTitle": "Api positive Check negative cases with paywaycurrency (\"\")",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "7da02214-cf02-477b-a867-8694e9fb14bb",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with paywaycurrency (TRUE)",
              "fullTitle": "Api positive Check negative cases with paywaycurrency (TRUE)",
              "timedOut": false,
              "duration": 195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "bbc42a37-250b-473a-9591-5c1e7100f946",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with paywaycurrency (invalid number (220))",
              "fullTitle": "Api positive Check negative cases with paywaycurrency (invalid number (220))",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "38f09e3f-ed50-448c-9efb-3020e5463f9c",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with paywaycurrency (\"544454\")",
              "fullTitle": "Api positive Check negative cases with paywaycurrency (\"544454\")",
              "timedOut": false,
              "duration": 180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "6d1e0f10-a328-40cb-a794-04fb72f8ad39",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check negative cases with paywaycurrency (\"fjdkvdnffv\")",
              "fullTitle": "Api positive Check negative cases with paywaycurrency (\"fjdkvdnffv\")",
              "timedOut": false,
              "duration": 317,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {
                "message": "Error: Field \"error\" is absent in Actual Response Body",
                "estack": "Error: Field \"error\" is absent in Actual Response Body\n    at Object.validateJSONResponse (src/core/test-helper.js:57:23)\n    at Context.<anonymous> (src/tests/api.js:52:24)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0fd574b6-ad06-46b5-937b-f7ae93f2d2b7",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Try to make fiat transaction with unavailable payway_currency (is_active: false)",
              "fullTitle": "Api positive Try to make fiat transaction with unavailable payway_currency (is_active: false)",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "84319c94-e5ef-4609-9bc4-3b8d8dbff797",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Try to make crypto transaction with unavailable payway_currency (is_active: false)",
              "fullTitle": "Api positive Try to make crypto transaction with unavailable payway_currency (is_active: false)",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "d574ef94-b59f-4256-b073-929ed1d50f61",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Try to register by already existing user",
              "fullTitle": "Api positive Try to register by already existing user",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "b24a1ef6-330f-49c1-9876-60846c09372b",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Try to login with incorrect password (123)",
              "fullTitle": "Api positive Try to login with incorrect password (123)",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "dec4dd6b-140b-4424-8610-143d2dabec1c",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Try to login with incorrect password (\"\")",
              "fullTitle": "Api positive Try to login with incorrect password (\"\")",
              "timedOut": false,
              "duration": 152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "069788f2-1d77-4809-b41d-70abc88f3bc4",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Try to register with incorrect password (unmatched requirements)",
              "fullTitle": "Api positive Try to register with incorrect password (unmatched requirements)",
              "timedOut": false,
              "duration": 156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "feeb6bcd-e4bf-4de8-ad83-559cac855dbb",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Try to register with already existing name",
              "fullTitle": "Api positive Try to register with already existing name",
              "timedOut": false,
              "duration": 156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "3598375b-1a8b-4281-ac7b-b82ba86f3835",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Try to register with already existing email",
              "fullTitle": "Api positive Try to register with already existing email",
              "timedOut": false,
              "duration": 165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// update the body in the parameters of which there is a password\nif (modules.doesObjHasValue(testData.requestBody, PASSWORD)) {\n    modules.updateObjValue(testData.requestBody, PASSWORD, envVariablesData.authAdminPassword);\n}\n// update the body if necessary, with the data saved from the previous test\nif (testData.modifyBody) {\n    modules.setObjKeyValue(testData.requestBody, `${testData.modifyBody}`, `${savedFromResponse}`);\n}\n// update the endPoint if necessary, with the data saved from the previous test\nif (testData.modifyEndPoint) {\n    testData.endPoint = testData.endPoint?.replace(`${testData.modifyEndPoint}`, `${savedFromResponse}`);\n}\n// header logs\nconsole.log('\\x1b[1m\\x1b[33mEndpoint:\\x1b[0m', JSON.stringify(testData.endPoint));\nconsole.log('\\x1b[1m\\x1b[33mMethod:\\x1b[0m', JSON.stringify(testData.method));\nconsole.log('\\x1b[1m\\x1b[33mRequest body:\\x1b[0m', JSON.stringify(testData.requestBody));\n// send request and get response\nresponse = await request.sendPostRequestWithToken(testData, testData.method, testData.role);\nconsole.log('\\x1b[1m\\x1b[33mExpected Response body:\\x1b[0m', JSON.stringify(testData.responseData));\nconsole.log('\\x1b[1m\\x1b[33mActual Response body:\\x1b[0m', JSON.stringify(response.body));\n// verification of response status\nexpect(response, `Response: ${response.text}`).to.have.status(testData.responseCode);\n// verification general parameters in response\ntestHelper.validateJSONResponse(testData.responseData, response.body);\ntestHelper.verifyJSONFields(testData.responseData, response.body);\n// save data for nex test\nif (testData.saveFromResponse) {\n    const elements = response.body[testData.addObj];\n    savedFromResponse = testData.addObj\n        ? elements[testData.saveFromResponse]\n        : response.body[testData.saveFromResponse];\n    console.log('\\x1b[1m\\x1b[33maddSavedFromResponse:\\x1b[0m', savedFromResponse);\n}",
              "err": {},
              "uuid": "d9b3af88-1aad-4e87-a7fb-99bb4dce49d6",
              "parentUUID": "2334b723-c1c6-464c-8830-33475e538549",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93accc3a-1ce4-490f-beec-c96d53ba7a15",
            "b685133e-5959-45c2-80d9-e134872700a4",
            "542a5c9f-44d6-4c6b-883e-1e9e4a6ab4b2",
            "37d227a7-5399-4702-8792-08257ba47a50",
            "44b2c0ea-0823-43ee-a812-4784d5e47aa1",
            "b001628a-a2e9-4940-817d-ac246d76799d",
            "c32e60fa-8fc1-449f-a6ad-777dee26a187",
            "b85f1d50-f871-4aff-a467-fc36522373a5",
            "7da02214-cf02-477b-a867-8694e9fb14bb",
            "bbc42a37-250b-473a-9591-5c1e7100f946",
            "38f09e3f-ed50-448c-9efb-3020e5463f9c",
            "6d1e0f10-a328-40cb-a794-04fb72f8ad39",
            "84319c94-e5ef-4609-9bc4-3b8d8dbff797",
            "d574ef94-b59f-4256-b073-929ed1d50f61",
            "b24a1ef6-330f-49c1-9876-60846c09372b",
            "dec4dd6b-140b-4424-8610-143d2dabec1c",
            "069788f2-1d77-4809-b41d-70abc88f3bc4",
            "feeb6bcd-e4bf-4de8-ad83-559cac855dbb",
            "3598375b-1a8b-4281-ac7b-b82ba86f3835",
            "d9b3af88-1aad-4e87-a7fb-99bb4dce49d6"
          ],
          "failures": [
            "0fd574b6-ad06-46b5-937b-f7ae93f2d2b7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4440,
          "root": false,
          "rootEmpty": false,
          "_timeout": 70000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 70000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "./src/mochaReports",
        "quite": true,
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}